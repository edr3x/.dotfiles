{
    "materialapp": {
        "prefix": "importmate",
        "body": [
            "import 'package:flutter/material.dart';",
            "import 'routes.dart'",
            "import 'views/home/home_page.dart'; ",
            " ",
            "void main() => runApp(const MyApp());",
            " ",
            "class MyApp extends StatelessWidget { ",
            "  const MyApp({super.key}); ",
            " ",
            "  @override ",
            "  Widget build(BuildContext context) { ",
            "    return MaterialApp( ",
            "      debugShowCheckedModeBanner: false, ",
            "      title: \"$1\", ",
            "      theme: ThemeData(primarySwatch: Colors.green), ",
            "      home: const HomePage(), ",
            "      onGenerateRoute: (set) => generateRoute(set),",
            "    ); ",
            "  } ",
            "}"
        ],
        "description": "material app default snipphet"
    },
    "get props": {
        "prefix": "gprops",
        "body": ["@override  ", "  List<Object> get props => [$1];  ", "$2"],
        "description": "equatable @override"
    },
    "materialpage": {
        "prefix": "importm",
        "body": ["import 'package:flutter/material.dart';"],
        "description": "import material.dart"
    },
    "eventdebounce": {
        "prefix": "eventdebounce",
        "body": [
            " EventTransformer<$1> debounce<$1>(",
            "      Duration duration) {",
            "    return ((events, mapper) => events.debounceTime(duration).flatMap(mapper));",
            "  }"
        ],
        "description": "for debounce time with duration"
    },
    "firebaseinit": {
        "prefix": "firebaseinit",
        "body": [
            "import 'package:firebase_core/firebase_core.dart'; ",
            "import 'firebase_options.dart'; ",
            "Future<void> main() async { ",
            "  WidgetsFlutterBinding.ensureInitialized(); ",
            "  await Firebase.initializeApp( ",
            "    options: DefaultFirebaseOptions.currentPlatform, ",
            "  ); ",
            "  runApp(const MyApp()); ",
            "}"
        ],
        "description": "initialize firebase in main function"
    },
    "homepage": {
        "prefix": "importhome",
        "body": [
            "import 'package:flutter/material.dart'; ",
            " ",
            "class HomePage extends StatelessWidget { ",
            "  const HomePage({super.key}); ",
            " ",
            "  @override ",
            "  Widget build(BuildContext context) { ",
            "    return Scaffold( ",
            "      appBar: AppBar( ",
            "        title: const Text(\"HomePage\"), ",
            "      ), ",
            "      body: const Center( ",
            "        child: Text(\"Hello\"), ",
            "      ), ",
            "    ); ",
            "  } ",
            "} ",
            ""
        ],
        "description": "creates homepage of a app"
    },
    "importprovider": {
        "prefix": "importprovider",
        "body": ["import 'package:provider/provider.dart';"],
        "description": "import snipphet for provider"
    },
    "trycatch": {
        "prefix": "trycatch",
        "body": [
            " try { ",
            " ",
            "      $1  ",
            " ",
            " } catch (e) { ",
            "  throw e.toString(); ",
            "}"
        ],
        "description": "simple trycatch"
    },
    "routeName": {
        "prefix": "routename",
        "body": ["static const String routeName = '$1';"],
        "description": "static const routeName creation for named redirection"
    },
    "fromjson": {
        "prefix": "fromjson",
        "body": [
            "factory $1.fromJson(Map<String, dynamic> json) => _$$1FromJson(json);"
        ],
        "description": "fromjson snipphet"
    },
    "tojson": {
        "prefix": "tojson",
        "body": ["Map<String, dynamic> toJson() => _$$1ToJson(this);"],
        "description": "tojson snipphet create"
    },
    "create custom error": {
        "prefix": "importcustomerror",
        "body": [
            "import 'package:equatable/equatable.dart'; ",
            " ",
            "class CustomError extends Equatable { ",
            "  final String errMsg; ",
            "  const CustomError({ ",
            "    this.errMsg = '', ",
            "  }); ",
            " ",
            "  @override ",
            "  List<Object> get props => [errMsg]; ",
            " ",
            "  @override ",
            "  bool get stringify => true; ",
            " ",
            "  @override ",
            "  String toString() => 'CustomError(errMsg: \\$errMsg)'; ",
            "}"
        ],
        "description": "for making custom_error.dart file"
    },
    "error dialogue": {
        "prefix": "customerrordialogue",
        "body": [
            "import 'dart:io'; ",
            "import 'package:flutter/material.dart'; ",
            "import 'package:flutter/cupertino.dart'; ",
            " ",
            "void errorDialog(BuildContext context, String errorMessage) { ",
            "  if (Platform.isIOS) { ",
            "    showCupertinoDialog( ",
            "      context: context, ",
            "      barrierDismissible: false, ",
            "      builder: (context) => CupertinoAlertDialog( ",
            "        title: const Text(\"Error\"), ",
            "        content: Text(errorMessage), ",
            "        actions: [ ",
            "          CupertinoDialogAction( ",
            "            child: const Text('Ok'), ",
            "            onPressed: () => Navigator.pop(context), ",
            "          ) ",
            "        ], ",
            "      ), ",
            "    ); ",
            "  } else if (Platform.isAndroid) { ",
            "    showDialog( ",
            "      context: context, ",
            "      barrierDismissible: false, ",
            "      builder: (context) => AlertDialog( ",
            "        title: const Text('Error'), ",
            "        content: Text(errorMessage), ",
            "        actions: [ ",
            "          TextButton( ",
            "            onPressed: () => Navigator.pop(context), ",
            "            child: const Text(\"OK\"), ",
            "          ), ",
            "        ], ",
            "      ), ",
            "    ); ",
            "  } ",
            "} ",
            ""
        ],
        "description": "make error dialogue"
    },
    "httpErrorHandler": {
        "prefix": "importhttphandler",
        "body": [
            "import 'package:http/http.dart' as http; ",
            " ",
            "String httpErrorHandler(http.Response response) { ",
            "  final statusCode = response.statusCode; ",
            "  final reasonPhrase = response.reasonPhrase; ",
            " ",
            "  final String errorMessage = ",
            "      'Request failed \\n \\$statusCode \\n Reason: \\$reasonPhrase'; ",
            " ",
            "  return errorMessage; ",
            "}"
        ],
        "description": "import http handler"
    },
    "returnfromjson": {
        "prefix": "returnfromjson",
        "body": ["return $1.fromJson(json.decode(response.body));"],
        "description": "returnfromjson"
    },
    "importexception": {
        "prefix": "importexception",
        "body": [
            "class $1Exception implements Exception { ",
            "  String message; ",
            "  $1Exception([ ",
            "    this.message = 'Something went wrong?', ",
            "  ]) { ",
            "    message = '$1 Exception: \\$message'; ",
            "  } ",
            " ",
            "  @override ",
            "  String toString() => message; ",
            "}"
        ],
        "description": "importexception for importing expetptions"
    },
    "List of model": {
        "prefix": "modelfromjson",
        "body": [
            "import 'dart:convert'; ",
            " ",
            "List<UserModel> userModelFromJson(String str) => ",
            "    List<UserModel>.from(json.decode(str).map((x) => UserModel.fromJson(x)));"
        ],
        "description": "list of model provided"
    },
    "routearg": {
        "prefix": "routearg",
        "body": [
            "final $1 = ModalRoute.of(context)?.settings.arguments as $2;"
        ],
        "description": "route argument receive in next page"
    },
    "rotes.dart": {
        "prefix": "routesdotdart",
        "body": [
            "import 'package:flutter/material.dart';",
            "import 'views/exports.dart';",
            "Route<MaterialPageRoute> generateRoute(RouteSettings settings) {",
            "  switch (settings.name) {",
            "   case HomePage.routeName:",
            "      return MaterialPageRoute(",
            "        settings: settings,",
            "        builder: (context) => const HomePage(),",
            "      );",
            "",
            "    default:",
            "      return MaterialPageRoute(",
            "        builder: (_) => const Scaffold(",
            "          body: Center(",
            "            child: Text('Error 404 page not found'),",
            "          ),",
            "        ),",
            "      );",
            "  }",
            "}"
        ],
        "description": "on generatedRoute snippet for routes.dart"
    },
    "route case": {
        "prefix": "routecase",
        "body": [
            "case $1.routeName:",
            "   return MaterialPageRoute(",
            "   settings: settings,",
            "   builder: (context) => const $1(),",
            ");",
            ""
        ],
        "description": "case satement for routes.dart file"
    }
}
